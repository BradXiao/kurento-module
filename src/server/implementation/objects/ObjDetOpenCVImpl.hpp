/* Autogenerated with kurento-module-creator */

#ifndef __OBJ_DET_OPENCV_IMPL_HPP__
#define __OBJ_DET_OPENCV_IMPL_HPP__
#include "yolov7.hpp"

#include "ObjDet.hpp"
#include <EventHandler.hpp>
#include <OpenCVProcess.hpp>

namespace kurento {
namespace module {
namespace objdet {

class ObjDetOpenCVImpl : public virtual OpenCVProcess {

public:
  ObjDetOpenCVImpl();

  virtual ~ObjDetOpenCVImpl() = default;
  virtual std::shared_ptr<MediaObject> getSharedFromThis();

  virtual void process(cv::Mat &mat);

  sigc::signal<void, boxDetected> signalboxDetected;
  sigc::signal<void, modelInitState> signalmodelInitState;
  sigc::signal<void, paramSetState> signalparamSetState;

  bool setConfidence(float confidence);
  bool setBoxLimit(int boxLimit);
  bool setIsDraw(bool isDraw);
  bool startInferring();
  bool stopInferring();
  bool destroy();

private:
  float confiThresh = 0.7;
  int boxLimit = 10;
  bool isDraw = false;
  bool isInferring = false;
  Yolov7trt *model;
  void sendSetParamSetResult(const std::string param_name, const std::string state);
};

} // namespace objdet
} // namespace module
} // namespace kurento

#endif /*  __OBJ_DET_OPENCV_IMPL_HPP__ */
