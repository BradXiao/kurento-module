/* Autogenerated with kurento-module-creator */

#ifndef __OBJ_DET_OPENCV_IMPL_HPP__
#define __OBJ_DET_OPENCV_IMPL_HPP__
#include "yolov7.hpp"

#include "ModelPool.hpp"
#include "ObjDet.hpp"
#include <EventHandler.hpp>
#include <OpenCVProcess.hpp>
#include <boost/uuid/uuid.hpp>
#include <boost/uuid/uuid_generators.hpp>
#include <boost/uuid/uuid_io.hpp>

namespace kurento {
namespace module {
namespace objdet {

extern ModelPool modelPool;

class ObjDetOpenCVImpl : public virtual OpenCVProcess {

public:
  ObjDetOpenCVImpl();
  ~ObjDetOpenCVImpl();

  virtual void process(cv::Mat &mat);
  virtual std::shared_ptr<MediaObject> getSharedFromThis() = 0;

  sigc::signal<void, boxDetected> signalboxDetected;
  sigc::signal<void, sessionInitState> signalsessionInitState;
  sigc::signal<void, paramSetState> signalparamSetState;
  sigc::signal<void, errorMessage> signalerrorMessage;
  sigc::signal<void, modelNamesEvent> signalmodelNamesEvent;
  sigc::signal<void, modelChanged> signalmodelChanged;

  bool setConfidence(float confidence);
  bool setBoxLimit(int boxLimit);
  bool setDrawing(bool isDrawing, bool keepBoxes);
  bool startInferring();
  bool stopInferring();
  bool heartbeat();
  bool initSession();
  bool changeModel(const std::string &modelName);
  bool getModelNames();
  bool setInferringDelay(const int msec);
  bool destroy();

private:
  std::string sessionId;
  std::string modelName;
  Yolov7trt *model;
  int boxLimit = 10;
  int inferringDelayMsec;
  float confiThresh = 0.7;
  bool isDrawing = false;
  bool keepBoxes = false;
  bool isInferring = false;

  boost::uuids::random_generator uuidGenerator;
  std::vector<utils::Obj> lastBoxes;
  std::time_t sessCheckTimestamp;
  std::time_t lastInferringTimestampMs;

  inline bool checkDelay(cv::Mat &mat, const std::chrono::system_clock::time_point &now);
  inline bool checkSession();
  inline bool checkModel();
  inline bool checkSessionIsValid(const std::chrono::system_clock::time_point &now);
  inline void filterByConfidence(std::vector<utils::Obj> &objs);
  inline void filterByBoxLimit(std::vector<utils::Obj> &objs);
  inline void drawObjects(cv::Mat &mat, const std::vector<utils::Obj> &objs);
  inline void sendBoxes(const std::vector<utils::Obj> &objs, const cv::Size &size);

  void sendSetParamSetResult(const std::string &param_name, const std::string &state);
  void sendErrorMessage(const std::string &state, const std::string &msg);
  bool initSession(const std::string &modelName);
};

} // namespace objdet
} // namespace module
} // namespace kurento

#endif /*  __OBJ_DET_OPENCV_IMPL_HPP__ */
