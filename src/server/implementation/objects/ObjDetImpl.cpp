/* Autogenerated with kurento-module-creator */

#include "ObjDetImpl.hpp"
#include "MediaPipeline.hpp"
#include "MediaPipelineImpl.hpp"
#include <KurentoException.hpp>
#include <ObjDetImplFactory.hpp>
#include <gst/gst.h>
#include <jsonrpc/JsonSerializer.hpp>

#define PLUGIN_NAME "KurentoObjDetImpl"
#define GST_CAT_DEFAULT kurento_obj_det_debug
GST_DEBUG_CATEGORY_STATIC(GST_CAT_DEFAULT);

namespace kurento {
namespace module {
namespace objdet {

ObjDetImpl::ObjDetImpl(const boost::property_tree::ptree &config, std::shared_ptr<MediaPipeline> mediaPipeline)
    : OpenCVFilterImpl(config, std::dynamic_pointer_cast<MediaPipelineImpl>(mediaPipeline))

{}

MediaObjectImpl *ObjDetImplFactory::createObject(const boost::property_tree::ptree &config,
                                                 std::shared_ptr<MediaPipeline> mediaPipeline) const {
  return new ObjDetImpl(config, mediaPipeline);
}

ObjDetImpl::StaticConstructor ObjDetImpl::staticConstructor;

ObjDetImpl::StaticConstructor::StaticConstructor() {
  GST_DEBUG_CATEGORY_INIT(GST_CAT_DEFAULT, PLUGIN_NAME, 0, PLUGIN_NAME " debug category");
}

void ObjDetImpl::setConfidence(float confidence) { ObjDetOpenCVImpl::setConfidence(confidence); };
void ObjDetImpl::setBoxLimit(int boxLimit) { ObjDetOpenCVImpl::setBoxLimit(boxLimit); };
void ObjDetImpl::setIsDraw(bool isDraw) { ObjDetOpenCVImpl::setIsDraw(isDraw); };
void ObjDetImpl::startInferring() { ObjDetOpenCVImpl::startInferring(); };
void ObjDetImpl::stopInferring() { ObjDetOpenCVImpl::stopInferring(); };
void ObjDetImpl::destroy() { ObjDetOpenCVImpl::destroy(); };

} // namespace objdet
} // namespace module
} // namespace kurento
